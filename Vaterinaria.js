const due√±os = new Map();       
const mascotas = new Map();    

let idDue√±o = 1;
let idMascota = 1;

function mostrarMenu() {
  let opcion;
  do {
    opcion = prompt(`
*****  MENU  ***********
1. Registrar un nuevo due√±o 
2. Registrar una nueva mascota 
3. Listar todas las mascotas
4. Buscar una mascota por nombre 
5. Actualizar estado de salud
6. Eliminar una mascota 
7. Ver mascotas de un due√±o 
8. Salir
Elige una opci√≥n:`);

    switch (opcion) {
      case "1": registrarDue√±oAsync(); break;
      case "2": registrarMascotaAsync(); break;
      case "3": listarMascotas(); break;
      case "4": buscarMascotaAsync(); break;
      case "5": actualizarSaludAsync(); break;
      case "6": eliminarMascotaAsync(); break;
      case "7": verMascotasPorCedulaAsync(); break;
      case "8": alert("¬°Hasta luego!"); break;
      default: alert("Opci√≥n inv√°lida");
    }
  } while (opcion !== "8");
}

function registrarDue√±oAsync() {
  const nombre = prompt("Nombre del due√±o:");
  const cedula = prompt("C√©dula:");
  const telefono = prompt("Tel√©fono:");
  const correo = prompt("Correo electr√≥nico:");

  if (!nombre || !cedula || !telefono || !correo) {
    alert("Todos los campos son obligatorios.");
    return;
  }

  setTimeout(() => {
    const nuevoDue√±o = {
      id: idDue√±o++,
      nombre,
      cedula,
      telefono,
      correo
    };
    due√±os.set(cedula, nuevoDue√±o);
    alert("Due√±o registrado con √©xito!");
  }, 1500);
}

function registrarMascotaAsync() {
  const nombre = prompt("Nombre de la mascota:");
  const especie = prompt("Especie (Perro, Gato, Ave, Reptil, Otro):");
  const edad = parseFloat(prompt("Edad (a√±os):"));
  const peso = parseFloat(prompt("Peso (kg):"));
  const estado = prompt("Estado de salud (Sano, Enfermo, En tratamiento):");
  const cedulaDue√±o = prompt("C√©dula del due√±o:");

  if (!nombre || !especie || isNaN(edad) || edad <= 0 || isNaN(peso) || peso <= 0 || !estado || !cedulaDue√±o) {
    alert("Datos inv√°lidos.");
    return;
  }

  setTimeout(() => {
    const due√±o = due√±os.get(cedulaDue√±o);
    if (!due√±o) {
      alert("Due√±o no encontrado (async).");
      return;
    }

    const nuevaMascota = {
      id: idMascota++,
      nombre,
      especie,
      edad,
      peso,
      estado,
      idDue√±o: due√±o.id,
      cedulaDue√±o
    };
    mascotas.set(nuevaMascota.id, nuevaMascota);
    alert("Mascota registrada con √©xito!");
  }, 2000);
}

function listarMascotas() {
  if (mascotas.size === 0) {
    alert("No hay mascotas registradas.");
    return;
  }

  console.log("Lista de Mascotas:");
  mascotas.forEach(m => {
    const due√±o = due√±os.get(m.cedulaDue√±o);
    console.log(`‚Ä¢ ${m.nombre} (${m.especie}) - ${m.estado} - Due√±o: ${due√±o?.nombre}`);
  });
}

function buscarMascotaAsync() {
  const nombre = prompt("Nombre de la mascota:");

  const buscar = new Promise((resolve, reject) => {
    setTimeout(() => {
      const mascota = [...mascotas.values()].find(m => m.nombre.toLowerCase() === nombre.toLowerCase());
      mascota ? resolve(mascota) : reject("Mascota no encontrada.");
    }, 1500);
  });

  buscar
    .then(m => {
      const due√±o = due√±os.get(m.cedulaDue√±o);
      alert(`Mascota encontrada:\nNombre: ${m.nombre}\nEstado: ${m.estado}\nDue√±o: ${due√±o?.nombre}`);
    })
    .catch(err => alert(err));
}

async function actualizarSaludAsync() {
  const nombre = prompt("Nombre de la mascota:");
  const nuevaSalud = prompt("Nuevo estado (Sano, Enfermo, En tratamiento):");

  const mascota = [...mascotas.values()].find(m => m.nombre.toLowerCase() === nombre.toLowerCase());
  if (!mascota) {
    alert("Mascota no encontrada.");
    return;
  }

  await new Promise(resolve => setTimeout(resolve, 1000));
  mascota.estado = nuevaSalud;
  alert("Estado de salud actualizado.");
}

function eliminarMascotaAsync() {
  const nombre = prompt("Nombre de la mascota a eliminar:");

  const eliminar = new Promise((resolve, reject) => {
    setTimeout(() => {
      const mascotaEntry = [...mascotas.entries()].find(([_, m]) => m.nombre.toLowerCase() === nombre.toLowerCase());
      if (!mascotaEntry) {
        reject("Mascota no encontrada.");
      } else {
        mascotas.delete(mascotaEntry[0]);
        resolve("Mascota eliminada con √©xito.");
      }
    }, 2000);
  });

  eliminar
    .then(msg => alert(msg))
    .catch(err => alert(err));
}

async function verMascotasPorCedulaAsync() {
  const cedula = prompt("C√©dula del due√±o:");
  const due√±o = due√±os.get(cedula);
  if (!due√±o) {
    alert("Due√±o no encontrado.");
    return;
  }

  await new Promise(resolve => setTimeout(resolve, 2000));
  const susMascotas = [...mascotas.values()].filter(m => m.cedulaDue√±o === cedula);

  if (susMascotas.length === 0) {
    alert("Este due√±o no tiene mascotas registradas.");
    return;
  }

  console.log(`üêæ Mascotas de ${due√±o.nombre}:`);
  susMascotas.forEach(m => {
    console.log(`‚Ä¢ ${m.nombre} (${m.especie}) - ${m.estado}`);
  });
}

mostrarMenu();
